
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(aster)
Loading required package: trust
> load("GC2015.RData")
> flist <- ls()
> va_star <- GC_Va.star
> se.va_star <- se.GC_Va.star
> se.va_star_sd <- se.GC_Va.star_sd
> rm(list = flist)
> load("GC2015B.RData")
> va_star <- c(va_star,GC_Va.star)
> se.va_star <- c(se.va_star,se.GC_Va.star)
> se.va_star_sd <- c(se.va_star_sd, se.GC_Va.star_sd)
> rm(list = flist)
> load("GC2015C.RData")
> va_star <- c(va_star,GC_Va.star)
> se.va_star <- c(se.va_star,se.GC_Va.star)
> se.va_star_sd <- c(se.va_star_sd, se.GC_Va.star_sd)
> rm(list = flist)
> load("GC2015D.RData")
> va_star <- c(va_star,GC_Va.star)
> se.va_star <- c(se.va_star,se.GC_Va.star)
> se.va_star_sd <- c(se.va_star_sd, se.GC_Va.star_sd)
> rm(list = flist)
> load("GC2015E.RData")
> va_star <- c(va_star,GC_Va.star)
> se.va_star <- c(se.va_star,se.GC_Va.star)
> se.va_star_sd <- c(se.va_star_sd, se.GC_Va.star_sd)
> rm(list = flist)
> load("GC2015F.RData")
> va_star <- c(va_star,GC_Va.star)
> se.va_star <- c(se.va_star,se.GC_Va.star)
> se.va_star_sd <- c(se.va_star_sd, se.GC_Va.star_sd)
> rm(list = flist)
> load("GC4.RData")
> va_star <- c(va_star,GC_Va.star)
> se.va_star <- c(se.va_star,se.GC_Va.star)
> se.va_star_sd <- c(se.va_star_sd, se.GC_Va.star_sd)
> rm(list = flist)
> load("GC5.RData")
> va_star <- c(va_star,GC_Va.star)
> se.va_star <- c(se.va_star,se.GC_Va.star)
> se.va_star_sd <- c(se.va_star_sd, se.GC_Va.star_sd)
> # rm(list = flist)  Now we have them all and want to keep the various variables
> 
> ########################################################
> # check
> ########################################################
> 
> length(va_star)
[1] 100
> 
> length(se.va_star)
[1] 100
> 
> length(se.va_star_sd)
[1] 100
> 
> 
> # assuming these are all 100, proceed
> 
> 
> GC_Va.star <- va_star
> se.GC_Va.star <- se.va_star
> se.GC_Va.star_sd <- se.va_star_sd
> 
> #### Back into the original CI code
> GC_Va.hat <- VaW(rout2015) # generates Va(W) from data
> 
> # calculate t for IQR-based confidence interval
> t <- (GC_Va.star - GC_Va.hat) / se.GC_Va.star
> 
> # set confidence level
> conf.level <- 0.95
> 
> # generate critical values with t for IQR-based confidence interval
> crit <- quantile(t, probs = c((1 - conf.level) / 2, (1 + conf.level) / 2))  # note this uses the t just calculated
> 
> # generate IQR and standard deviation measures of scale
> foo <- GC_Va.star    # the outer loop Va's
> se.GC_Va.hat <- diff(sort(foo)[c(25,76)])  # middle 50 percent of 100 or so
> 
> se.GC_Va.hat_sd <- sd(foo)  # standard deviation calculation of scale
> 
> # Conf. Int. for GC_Va with IQR scale metric
> GC_Va.hat + crit * se.GC_Va.hat
     2.5%     97.5% 
0.4431186 2.7436692 
> 
> # calculate t for standard deviation-based confidence interval
> t <- (GC_Va.star - GC_Va.hat) / se.GC_Va.star_sd
> 
> # generate critical values with t for standard deviation-based confidence interval
> crit <- quantile(t, probs = c((1 - conf.level) / 2, (1 + conf.level) / 2))
> 
> # Conf. Int. for GC_Va with standard deviation scale metric
> GC_Va.hat + crit * se.GC_Va.hat_sd
     2.5%     97.5% 
0.3316925 2.8517655 
> 
> proc.time()
   user  system elapsed 
  7.910   0.275   8.207 
> 
