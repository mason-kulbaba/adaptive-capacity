library(refund)
# set up variable domain "frstart" -> day of flowering since a ramet's first flower opened
frstart<- aggregate(sing$frstart, by=list(sing$PlantID), max)
frstart$Group.1<- NULL
frstart<- as.matrix(frstart)
frstart<- as.vector(frstart)
#fruit set, as a different response
frt<- aggregate(sing$FrtSet, by=list(sing$PlantID), sum)
frt$Group.1<- NULL
#check dist of outcrossed seeds
library(MASS)
oc.p<- fitdistr(oc$x, "poisson")
oc.n<- fitdistr(oc$x, "normal")
oc.nb<- fitdistr(oc$x, "negative binomial")
AIC(oc.p, oc.n, oc.nb)
# frt set dist
frt.p<- fitdistr(frt$x, "poisson")
frt.n<- fitdistr(frt$x, "normal")
frt.nb<- fitdistr(frt$x, "negative binomial")
AIC(oc.p, oc.n, oc.nb)
#use number of oc seeds, with log(number of genotyped seeds) and neg. binomial
fit.1<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = "s") + log(unlist(geno)), family='nb')
fit.2<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = 'te')  + log(unlist(geno)) + unlist(flw.no),family='nb')
#output of results
fit<- coef(fit.2)   #Note: are these transformed?
#make absolute frstart date
fit$x<- fit$long.arg * fit$long.vd
#log transform 'value'
fit$log.val<- log(fit$value +1)
plot(fit$x, fit$value, type="l", main="no log")
fit.2<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = 'te', transform = 'standardized')  + log(unlist(geno)) + unlist(flw.no),family='nb')
summary(fit.2)
#output of results
fit<- coef(fit.2)   #Note: are these transformed?
#make absolute frstart date
fit$x<- fit$long.arg * fit$long.vd
#log transform 'value'
fit$log.val<- log(fit$value +1)
plot(fit$x, fit$value, type="l", main="no log")
names(fit)
plot(fit$long.arg, fit$log.val, type="l", main="relative")
fit.2<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = 't2', transform = 'standardized')  + log(unlist(geno)) + unlist(flw.no),family='nb')
summary(fit.2)
#output of results
fit<- coef(fit.2)   #Note: are these transformed?
#make absolute frstart date
fit$x<- fit$long.arg * fit$long.vd
#log transform 'value'
fit$log.val<- log(fit$value +1)
plot(fit$x, fit$value, type="l", main="no log")
plot(fit$long.arg, fit$log.val, type="l", main="relative")
fit.2<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = 't2', transform = 'standardized')  + log(unlist(geno)) ,family='nb')
summary(fit.2)
fit.2<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = 'te', transform = 'standardized')  + log(unlist(geno)) ,family='nb')
summary(fit.2)
fit.2<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = 't2', transform = 'standardized')  + log(unlist(geno)) ,family='nb')
#output of results
fit<- coef(fit.2)   #Note: are these transformed?
#make absolute frstart date
fit$x<- fit$long.arg * fit$long.vd
#log transform 'value'
fit$log.val<- log(fit$value +1)
plot(fit$x, fit$value, type="l", main="no log")
plot(fit$long.arg, fit$log.val, type="l", main="relative")
fit.2<- pfr(frt ~ lf.vd(long, vd=frstart, basistype = 'te', transform = 'standardized')
+ unlist(flw.no),family='nb')
summary(fit.2)
#output of results
fit<- coef(fit.2)   #Note: are these transformed? - pretty sure that they are!
#make absolute frstart date
fit$x<- fit$long.arg * fit$long.vd
#log transform 'value'
fit$log.val<- log(fit$value +1)
plot(fit$x, fit$value, pch=fit$long.vd, type = "l", main="no log")
plot(fit$x, fit$log.val, pch=fit$long.vd, type = "l",  main="with log")
plot(fit$long.arg, fit$log.val, pch=fit$long.vd, type = "l",  main="relative")
fit.2<- pfr(frt ~ lf.vd(long, vd=frstart, basistype = 'te', transform = 'standardized')
+ unlist(flw.no) + unlist(ramet),family='nb')
summary(fit.2)
ramet
#output of results
fit<- coef(fit.2)   #Note: are these transformed? - pretty sure that they are!
#make absolute frstart date
fit$x<- fit$long.arg * fit$long.vd
#log transform 'value'
fit$log.val<- log(fit$value +1)
plot(fit$x, fit$value, pch=fit$long.vd, type = "l", main="no log")
plot(fit$long.arg, fit$log.val, pch=fit$long.vd, type = "l",  main="relative")
fit.2<- pfr(frt ~ lf.vd(long, vd=frstart, basistype = 't2', transform = 'standardized')
+ unlist(flw.no) + unlist(ramet),family='nb')
summary(fit.2)
#output of results
fit<- coef(fit.2)   #Note: are these transformed? - pretty sure that they are!
#make absolute frstart date
fit$x<- fit$long.arg * fit$long.vd
#log transform 'value'
fit$log.val<- log(fit$value +1)
plot(fit$x, fit$value, pch=fit$long.vd, type = "l", main="no log")
plot(fit$long.arg, fit$log.val, pch=fit$long.vd, type = "l",  main="relative")
fit.2<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = 't2', transform = 'standardized')  + log(unlist(geno)) + unlist(ramet) ,family='nb')
summary(fit.2)
#output of results
fit<- coef(fit.2)   #Note: are these transformed?
#make absolute frstart date
fit$x<- fit$long.arg * fit$long.vd
#log transform 'value'
fit$log.val<- log(fit$value +1)
plot(fit$x, fit$value, type="l", main="no log")
plot(fit$long.arg, fit$log.val, type="l", main="relative")
fit.2<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = 't2', transform = 'standardized')  + log(unlist(geno)) ,family='nb')
summary(fit.2)
fit.2<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = 'te', transform = 'standardized')  + log(unlist(geno)) ,family='nb')
summary(fit.2)
# load longevity data (from Lawrence Feb 11, 2020)
dat<- read.csv("C:/Users/Mason Kulbaba/Dropbox/git/ESA fvt/data/anthesis_bisexual.csv")
#make variable with total number of ramets for each genet
tot.ramet<- aggregate(dat$Ramet, by=list(dat$PlantID), max)
colnames(tot.ramet)<- c("PlantID", "tot.ramet")
dat2<- merge(dat, tot.ramet, by="PlantID")
# subset only single ramet, and firt of multi-ramets
#comment out if want all ramets, otherwise will just use firt and singles
sing<- subset(dat2, Ramet == 1)
# remove comment if all ramets wanted
#sing<- dat
#remove rows that have NAs for outcrossed seeds
sing<- sing[complete.cases(sing$outseeds), ]
# genet sum for outcrossed seeds
oc<- aggregate(sing$outseeds, by=list(sing$PlantID),  sum)
oc$Group.1<- NULL
# genet sum for seeds genotyped
geno<- aggregate(sing$genoseeds, by=list(sing$PlantID), sum)
geno$Group.1<- NULL
# Make two column object for response: 1. number oc seeds 2. number of self
# calculate number of self seeds
self<- geno - oc
#combine into one object
oc.self<- cbind(oc, self)
#rename cols
colnames(oc.self)<- c("oc", "self")
#Ramet number for each genet
ramet<- aggregate(sing$tot.ramet, by=list(sing$PlantID), max)
ramet$Group.1<- NULL
# ramet-level flower production
flw.no<- aggregate(sing$ntotfl, by=list(sing$PlantID), max)
flw.no$Group.1<- NULL
#subset just what is needed for functional predictor
singmorph<- sing[c("PlantID","frstart", "cumbflw")]
long<- reshape(singmorph, timevar="frstart", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
long<- as.matrix(long)
library(refund)
# set up variable dom: frstart -> day of flowering since a ramet's first flower opened
frstart<- aggregate(sing$frstart, by=list(sing$PlantID), max)
frstart$Group.1<- NULL
frstart<- as.matrix(frstart)
frstart<- as.vector(frstart)
# fruit set
frt<- aggregate(sing$nfrt, by=list(sing$PlantID), max)
frt$Group.1<- NULL
#flower number
flw<- aggregate(sing$ntotflw, by=list(sing$PlantID), max)
flw$Group.1<- NULL
id<- as.data.frame(unique(sing$PlantID))
#check dist of 'oc'
library(MASS)
oc.p<- fitdistr(oc$x, "poisson")
oc.n<- fitdistr(oc$x, "normal")
oc.nb<- fitdistr(oc$x, "negative binomial")
AIC(oc.p, oc.n, oc.nb) # as expected, Neg. binomial
#start of ramet
onset<- aggregate(sing$fstart, by=list(sing$PlantID), min)
onset$Group.1<- NULL
#perform functional regression with variable dom on number of OC seeds
#need to think about:
#         1. Offset: number of genotyped seeds, number of flowers prodcued, genet size?
#         2. Covariates:  if 'nb' need log(genotyped seeds)
#         3. What about number of new flowers each day in place of cumflower?
fit.1a<- pfr(oc~lf.vd(long, vd=frstart, basistype = 't2', transform='standardized'),family='nb')
summary(fit.1a)
fit.1a<- pfr(oc~lf.vd(long, vd=frstart, basistype = 'te', transform='standardized'),family='nb')
summary(fit.1a)
fit.1a<- pfr(oc~lf.vd(long, vd=frstart, basistype = 't2', transform='standardized') +kig(unlist(geno)),family='nb')
fit.1a<- pfr(oc~lf.vd(long, vd=frstart, basistype = 't2', transform='standardized') +log(unlist(geno)),family='nb')
summary(fit.1a)
fit.1a<- pfr(oc~lf.vd(long, vd=frstart, basistype = 'te', transform='standardized') +log(unlist(geno)),family='nb')
summary(fit.1a)
fit.1a<- pfr(oc~lf.vd(long, vd=frstart, basistype = 's', transform='standardized') +log(unlist(geno)),family='nb')
summary(fit.1a)
fit.1a<- pfr(oc~lf.vd(long, vd=frstart, basistype = 'te', transform='standardized') +log(unlist(geno)),family='nb')
summary(fit.1a)
fit.1a<- pfr(oc~lf.vd(long, vd=frstart, basistype = 't2', transform='standardized') +log(unlist(geno)),family='nb')
summary(fit.1a)
fit.2<- pfr(oc~ lf.vd(long, vd=frstart, basistype = 't2', transform = 'standardized') + log(unlist(geno)) + unlist(ramet) +unlist(flw.no), family='nb')
summary(fit.2)
fit.2<- pfr(oc~ lf.vd(long, vd=frstart, basistype = 'te', transform = 'standardized') + log(unlist(geno)) + unlist(ramet) +unlist(flw.no), family='nb')
summary(fit.2)
fit.2<- pfr(oc~ lf.vd(long, vd=frstart, basistype = 'te', transform = 'standardized') + log(unlist(geno)) + unlist(flw.no), family='nb')
summary(fit.2)
#output of results
fit<- coef(fit.1a)   #Note: are these transformed? - pretty sure that they are!
#make absolute frstart date
fit$x<- fit$long.arg * fit$long.vd
#log transform 'value'
fit$log.val<- log(fit$value +1)
plot(fit$x, fit$value, pch=fit$long.vd, type = "l", main="no log")
plot(fit$long.arg, fit$value, pch=fit$long.vd,type='l', main='relative')
#output of results
fit<- coef(fit.2)   #Note: are these transformed? - pretty sure that they are!
#make absolute frstart date
fit$x<- fit$long.arg * fit$long.vd
#log transform 'value'
fit$log.val<- log(fit$value +1)
plot(fit$x, fit$value, pch=fit$long.vd, type = "l", main="no log")
plot(fit$long.arg, fit$value, pch=fit$long.vd,type='l', main='relative')
dat<- read.csv("C:/Users/Mason Kulbaba/Dropbox/git/ESA fvt/data/anthesis_bisexual.csv")
#make variable with total number of ramets for each genet
tot.ramet<- aggregate(dat$Ramet, by=list(dat$PlantID), max)
colnames(tot.ramet)<- c("PlantID", "tot.ramet")
dat2<- merge(dat, tot.ramet, by="PlantID")
# subset only single ramet, and firt of multi-ramets
#comment out if want all ramets, otherwise will just use firt and singles
sing<- subset(dat2, Ramet == 1)
# remove comment if all ramets wanted
# sing<- dat
#remove rows that have NAs for outcrossed seeds
sing<- sing[complete.cases(sing$outseeds), ]
# genet sum for outcrossed seeds
oc<- aggregate(sing$outseeds, by=list(sing$PlantID),  sum)
oc$Group.1<- NULL
# genet sum for seeds genotyped
geno<- aggregate(sing$genoseeds, by=list(sing$PlantID), sum)
geno$Group.1<- NULL
# Make two column object for response: 1. number oc seeds 2. number of self
# calculate number of self seeds
self<- geno - oc
#combine into one object
oc.self<- cbind(oc, self)
#rename cols
colnames(oc.self)<- c("oc", "self")
#Ramet number for each genet
ramet<- aggregate(sing$tot.ramet, by=list(sing$PlantID), max)
ramet$Group.1<- NULL
# ramet-level flower production
flw.no<- aggregate(sing$ntotfl, by=list(sing$PlantID), max)
flw.no$Group.1<- NULL
#subset just what is needed for functional predictor
singmorph<- sing[c("PlantID","frstart", "cumbflw")]
long<- reshape(singmorph, timevar="frstart", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
long<- as.matrix(long)
library(refund)
# set up variable dom: frstart -> day of flowering since a ramet's first flower opened
frstart<- aggregate(sing$frstart, by=list(sing$PlantID), max)
frstart$Group.1<- NULL
frstart<- as.matrix(frstart)
frstart<- as.vector(frstart)
frt<- aggregate(sing$nfrt, by=list(sing$PlantID), max)
frt$Group.1<- NULL
flw<- aggregate(sing$ntotflw, by=list(sing$PlantID), max)
flw$Group.1<- NULL
id<- as.data.frame(unique(sing$PlantID))
library(MASS)
oc.p<- fitdistr(oc$x, "poisson")
oc.n<- fitdistr(oc$x, "normal")
oc.nb<- fitdistr(oc$x, "negative binomial")
AIC(oc.p, oc.n, oc.nb) # as expected, Neg. binomial
#start of ramet
onset<- aggregate(sing$fstart, by=list(sing$PlantID), min)
onset$Group.1<- NULL
fit.1<- pfr(oc~lf.vd(long, vd=frstart, basistype = 's', transform='standardized')
+log(unlist(geno)),family='nb')
fit.2<- pfr(oc~ lf.vd(long, vd=frstart, basistype = 'te', transform = 'standardized')
+ log(unlist(geno)), family='nb')
fit.3<- pfr(oc~ lf.vd(long, vd=frstart, basistype = 't2')
+ log(unlist(geno)), family='nb')
summary(fit.1)
summary(fit.2)
summary(fit.3)
fit.3<- pfr(oc~ lf.vd(long, vd=frstart, basistype = 't2', transform = 'standardized')
+ log(unlist(geno)), family='nb')
summary(fit.3)
AIC(fit.1, fit.2, fit.3)
#use basistype= te, add covariates
fit.2<- pfr(oc~ lf.vd(long, vd=frstart, basistype = 'te', transform = 'standardized')
+ log(unlist(geno)), family='nb')
fit.2b<- pfr(oc~ lf.vd(long, vd=frstart, basistype = 'te', transform = 'standardized')
+ log(unlist(geno)) + unlist(ramet), family='nb')
fit.2c<- pfr(oc~ lf.vd(long, vd=frstart, basistype = 'te', transform = 'standardized')
+ log(unlist(geno)) + unlist(flw)+ unlist(onset), family='nb')
summary(fit.2b)
summary(fit.2c)
AIC(fit.2, fit.2b)
AIC(fit.2, fit.2b, fit.2c)
#output of results
fit<- coef(fit.2)
#make absolute frstart date
fit$x<- fit$long.arg * fit$long.vd
plot(fit$x, fit$value, pch=fit$long.vd, type = "l", main="absolute")
plot(fit$long.arg, fit$value, pch=fit$long.vd,type='l', main='relative')
frt.p<- fitdistr(frt$x, "poisson")
frt.n<- fitdistr(frt$x, "normal")
frt.nb<- fitdistr(frt$x, "negative binomial")
AIC(frt.p, frt.n, frt.nb)# slighlty lower AIC for 'normal' comapred to 'nb' -> test both
#funcitonal regression with fruit set
fit.1<- pfr(frt~ lf.vd(long, vd=frstart, basistype="s", transform='standardized'), family='gaussian')
fit.1b<- pfr(frt~ lf.vd(long, vd=frstart, basistype="s", transform='standardized'), family='nb')
summary(fit.1)
summary(fit.1b)
AIC(fit.1, fit.1b)#normal performes better -> resolve this, doesn't sound right, but continue for now
dat<- read.csv("C:/Users/Mason Kulbaba/Dropbox/git/ESA fvt/data/longevity_bisexual.csv")
# Code to set NA to 0
# dat$outseeds[is.na(dat$outseeds)]<- 0
#comment out if want all ramets, otherwise will just use firt and singles
sing<- subset(dat, Ramet == 1)
# remove comment if all ramets wanted
#sing<- dat
#just main stem for now
sing<- subset(sing, Branch == 0)
#remove rows that have NAs for outcrossed seeds
sing<- sing[complete.cases(sing$outseeds), ]
# genet sum for outcrossed seeds
oc<- aggregate(sing$outseeds, by=list(sing$PlantID),  sum)
oc$Group.1<- NULL
# genet sum for seeds genotyped
geno<- aggregate(sing$genoseeds, by=list(sing$PlantID), sum)
geno$Group.1<- NULL
# Make two column object for response: 1. number oc seeds 2. number of self
# calculate number of self seeds
self<- geno - oc
#combine into one object
oc.self<- cbind(oc, self)
#rename cols
colnames(oc.self)<- c("oc", "self")
#Ramet number for each genet
ramet<- aggregate(sing$TotRamet, by=list(sing$PlantID), max)
ramet$Group.1<- NULL
# ramet-level flower production
flw.no<- aggregate(sing$Pos, by=list(sing$PlantID), max)
flw.no$Group.1<- NULL
#Prepare funcitonal predictor - flower longevity
#isolate ID, flower pos, and longevity data
singmorph<- sing[c("PlantID","Pos", "longevity")]
#reshape into long-form matrix
long<- reshape(singmorph, timevar="Pos", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
long<- as.matrix(long)
#load package Refund
library(refund)
# set up variable domain "frstart" -> day of flowering since a ramet's first flower opened
frstart<- aggregate(sing$frstart, by=list(sing$PlantID), max)
frstart$Group.1<- NULL
frstart<- as.matrix(frstart)
frstart<- as.vector(frstart)
frt<- aggregate(sing$FrtSet, by=list(sing$PlantID), sum)
frt$Group.1<- NULL
# load longevity data (from Lawrence Feb 11, 2020)
dat<- read.csv("C:/Users/Mason Kulbaba/Dropbox/git/ESA fvt/data/longevity_bisexual.csv")
# Code to set NA to 0
# dat$outseeds[is.na(dat$outseeds)]<- 0
#comment out if want all ramets, otherwise will just use firt and singles
sing<- subset(dat, Ramet == 1)
# remove comment if all ramets wanted
#sing<- dat
#just main stem for now
sing<- subset(sing, Branch == 0)
#remove rows that have NAs for outcrossed seeds
sing<- sing[complete.cases(sing$outseeds), ]
# genet sum for outcrossed seeds
oc<- aggregate(sing$outseeds, by=list(sing$PlantID),  sum)
oc$Group.1<- NULL
# genet sum for seeds genotyped
geno<- aggregate(sing$genoseeds, by=list(sing$PlantID), sum)
geno$Group.1<- NULL
# Make two column object for response: 1. number oc seeds 2. number of self
# calculate number of self seeds
self<- geno - oc
#combine into one object
oc.self<- cbind(oc, self)
#rename cols
colnames(oc.self)<- c("oc", "self")
#Ramet number for each genet
ramet<- aggregate(sing$TotRamet, by=list(sing$PlantID), max)
ramet$Group.1<- NULL
# ramet-level flower production
flw.no<- aggregate(sing$Pos, by=list(sing$PlantID), max)
flw.no$Group.1<- NULL
#Prepare funcitonal predictor - flower longevity
#isolate ID, flower pos, and longevity data
singmorph<- sing[c("PlantID","Pos", "longevity")]
#reshape into long-form matrix
long<- reshape(singmorph, timevar="Pos", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
long<- as.matrix(long)
#load package Refund
library(refund)
# set up variable domain "frstart" -> day of flowering since a ramet's first flower opened
frstart<- aggregate(sing$frstart, by=list(sing$PlantID), max)
frstart$Group.1<- NULL
frstart<- as.matrix(frstart)
frstart<- as.vector(frstart)
#export variable domain frstart
#write.table(frstart, file="C:/Users/Mason Kulbaba/Dropbox/git/ESA fvt/results/longevity_frstart_vd.csv"
#            , sep=",", quote=F, row.names=F)
#fruit set, as a different response
frt<- aggregate(sing$FrtSet, by=list(sing$PlantID), sum)
frt$Group.1<- NULL
#check dist of outcrossed seeds
library(MASS)
oc.p<- fitdistr(oc$x, "poisson")
oc.n<- fitdistr(oc$x, "normal")
oc.nb<- fitdistr(oc$x, "negative binomial")
AIC(oc.p, oc.n, oc.nb)
# frt set dist
frt.p<- fitdistr(frt$x, "poisson")
frt.n<- fitdistr(frt$x, "normal")
frt.nb<- fitdistr(frt$x, "negative binomial")
AIC(oc.p, oc.n, oc.nb)
# now add measure of genet size: ramet number
fit.1<- pfr(frt ~ lf.vd(long, vd=frstart, basistype = "s", transform='standardized'),
family='nb')
fit.1b<- pfr(frt ~ lf.vd(long, vd=frstart, basistype = "s", transform='standardized')
+ unlist(flw.no), family='nb')
fit.1c<- pfr(frt ~ lf.vd(long, vd=frstart, basistype = "s", transform='standardized')
+ unlist(flw.no) + unlist(ramet),  family='nb')
AIC(fit.1, fit.1b, fit.1c)
#use number of oc seeds, with log(number of genotyped seeds) and neg. binomial
fit.1<- pfr(frt ~ lf.vd(long, vd=frstart, basistype = "s", transform='standardized'), family='nb')
fit.1<- pfr(frt ~ lf.vd(long, vd=frstart, basistype = "te", transform='standardized'), family='nb')
fit.1<- pfr(frt ~ lf.vd(long, vd=frstart, basistype = "t2", transform='standardized'), family='nb')
summary(fit.1)
summary(fit.2)
#use number of oc seeds, with log(number of genotyped seeds) and neg. binomial
fit.1<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = "s") + log(unlist(geno)), family='nb')
fit.2<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = 'te', transform = 'standardized')  + log(unlist(geno)) ,family='nb')
fit.3<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = 't2')  + log(unlist(geno)), family='nb')
summary(fit.1)
summary(fit.2)
summary(fit.3)
AIC(fit.1, fit.2, fit.3)#use te again, now add covariates
fit.2<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = 'te', transform = 'standardized')
+ log(unlist(geno)) ,family='nb')
fit.2b<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = 'te', transform = 'standardized')
+ log(unlist(geno))  + unlist(flw.no) ,family='nb')
fit.2c<- pfr(oc ~ lf.vd(long, vd=frstart, basistype = 'te', transform = 'standardized')
+ log(unlist(geno))+ unlist(flw.no) + unlist(ramet) ,family='nb')
summary(fit.2)
summary(fit.2b)
summary(fit.2c)
AIC(fit.2, fit.2b, fit.2c)
#output of results
fit<- coef(fit.2)
#make absolute frstart date
fit$x<- fit$long.arg * fit$long.vd
plot(fit$x, fit$value, type="l", main="absolute")
plot(fit$long.arg, fit$log.val, type="l", main="relative")
les generated in: GC_W_reaster_analyses.R
setwd("C:/Users/Mason Kulbaba/Dropbox/git/adaptive-capacity/VaW_W_analyses/GC")
#Load reaster
#2015 reaster data
load(file="rout2015b.RData")
#2016 reaster data
load(file="rout2016b.RData")
#2017 reaster data
load(file="rout2017b.RData")
library(aster)
#########################
#Estimate Va(W) for 2015#
#########################
#extract bhat - the estimates of random effects
bhat<- rout2015b$b
#extract the sire effects
bhat.sire<- bhat[grep("paternalID", names(bhat))]
#stem plot of bhat estimates
stem(bhat.sire)#the canonical estimates "look" somewhat normal...as they should
hoom <- predict(rout2015b$obj, newcoef = rout2015b$alpha)
hoom<- matrix(hoom, ncol =5)
hoom<- hoom[ , 5]
#add a component of b_hat that we want to map to the mean value
#parameter scale (from canoonical scale) to fit:block1 fixed effect (alpha[11]= block6),
#predict, and take value of fourth node for first indiv.
map <- function(b) {
stopifnot(length(b) == 1)
stopifnot(is.finite(b))
alpha <- rout2015b$alpha
alpha[11] <- alpha[11] + b #block 6 effects
hoom <- predict(rout2015b$obj, newcoef = alpha)
hoom <- matrix(hoom, ncol = 5)
return(hoom[1874, 5])#first individual in block 6, fifth node
}
#vectorize mapping function
fred<- Vectorize(map)
#plot the curve
curve(fred, from = -1 / 2, to = 1/2, xlab="b", ylab=expression(mu(b)))
#use the mapping function "fred" to convert the sire effects from the
#canonical to mean-value parameter scale
bhat.sireGC.mu<- fred(bhat.sire)
GC_b2015<- bhat.sireGC.mu
stem(bhat.sireGC.mu)#no longer normal as expected
#generate probability density distribution
gc2015den<-density(bhat.sireGC.mu)
GC2015_den<- cbind(gc2015den[[1]], gc2015den[[2]])
#write.csv(GC2015_den, "gc2015den.csv", quote = FALSE, row.names = FALSE)
hoom<- predict(rout2015b$obj, newcoef = rout2015b$alpha, se.fit=TRUE)
goom <- hoom$gradient
moom<- goom[,5]
moom<- matrix(moom, ncol=5)
#this is additive genetic variation for fitness!
GC_Va<- 4*moom[1874 ,5]^2 * rout2015b$nu[1]/map(0)
GC_Va #1.8576
#recall mean fitness in 2015 = 1.11
#predicted change in fitness from FFTNS:
GC_Va/1.11
