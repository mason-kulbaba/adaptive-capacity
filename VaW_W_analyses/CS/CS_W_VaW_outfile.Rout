
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #The following code performs reaster analyses that will be used to calculate the 
> #additive genetic variance for fitness (Va.W) and mean expected fitness (W) for 
> #the pedigreed "greenhouse" cohort in the CERA site for three years (2015-2017)
> 
> 
> #Steps to the analyiss
> 
> #   1. Estimate mean expected fitness in "greenhouse" generations, and identify block used
> #      to represent the site. This block will then be used in the calcualtion of Va(W).
> 
> #   2. Reaster models to produce output using block identified in step 1.
> 
> #   3. G x Time (environment) analysis
> 
> 
> #Note: the same graphical model is used in all above three steps.
> 
> #The varibles occur in the following order:
> 
> # 1.  "Germ" -> germination (0=no, 1=yes), Bernoulli
> # 2.  "flw" -> survival to flowering (0=no, 1=yes), Bernoulli
> # 3.  "total.pods" -> total number of pods produced, Poisson
> # 4.  "total.pods.collected" -> number of pods collected (subsampled pods), Poisson
> # 5.  "totalseeds" -> total number of seeds counted from collected pods, Poisson
> 
> 
> 
> #################
> 
> #Begin with data preparation
> 
> #Load 3-year data file for Grey Cloud Dunes
> 
> setwd("C:/Users/Mason Kulbaba/Dropbox/Rscripts/chamaecrista-adaptive-capacity/VaW_W_analyses/CS")
> 
> csdat<- read.csv("csdat.csv")
> 
> #divide into year-specific files
> cs2015<- subset(csdat, year==2015)
> cs2016<- subset(csdat, year==2016)
> cs2017<- subset(csdat, year==2017)
> 
> #drop unused levels
> cs2015<- droplevels(cs2015)
> cs2016<- droplevels(cs2016)
> cs2017<- droplevels(cs2017)
> 
> 
> ###################################################################################
> # 1. Estimate mean expected fitness in greenhouse genration for 2015 and 2016 year#
> ###################################################################################
> 
> #isolate greenhouse generation from 2016 and 2017 data (only greenhouse cohort in 2015)
> cs2016<- subset(cs2016, cohort=="greenhouse")
> cs2016<- droplevels(cs2016)
> 
> cs2017<- subset(cs2017, cohort=="greenhouse")
> cs2017<- droplevels(cs2017)
> 
> 
> #make sure maternalID and paternalID is a factor
> cs2015$maternalID<- as.factor(cs2015$maternalID)
> cs2015$paternalID<- as.factor(cs2015$paternalID)
> 
> cs2016$maternalID<- as.factor(cs2016$maternalID)
> cs2016$paternalID<- as.factor(cs2016$paternalID)
> 
> cs2017$maternalID<- as.factor(cs2017$maternalID)
> cs2017$paternalID<- as.factor(cs2017$paternalID)
> 
> #set response variables -> these represent variables in graphical model
> vars<- c("Germ","flw","total.pods", "total.pods.collected", "totalseeds")
> 
> 
> #reshape data so that all response variables are located in a single vector in a new data
> #set called "redata"
> redata2015 <- reshape(cs2015, varying = list(vars), direction = "long",timevar = "varb", times = as.factor(vars), v.names = "resp")
> 
> redata2016 <- reshape(cs2016, varying = list(vars), direction = "long",timevar = "varb", times = as.factor(vars), v.names = "resp")
> 
> redata2017 <- reshape(cs2017, varying = list(vars), direction = "long",timevar = "varb", times = as.factor(vars), v.names = "resp")
> 
> #Designation of fitness variable for 2015 data
> fit <- grepl("totalseeds", as.character(redata2015$varb))
> fit<- as.numeric(fit)
> 
> redata2015$fit <- fit
> 
> #check
> with(redata2015, sort(unique(as.character(varb)[fit == 0])))
[1] "flw"                  "Germ"                 "total.pods"          
[4] "total.pods.collected"
> with(redata2015, sort(unique(as.character(varb)[fit == 1])))
[1] "totalseeds"
> 
> 
> #add a variable "root" to redata files, where value is 1
> redata2015<- data.frame(redata2015, root=1)
> redata2016<- data.frame(redata2016, root=1)
> 
> 
> #make sure block, row, and position are factors
> redata2015$block<- as.factor(redata2015$block)
> redata2015$row<- as.factor(redata2015$row)
> redata2015$position<- as.factor(redata2015$position)
> 
> redata2016$block<- as.factor(redata2016$block)
> redata2016$row<- as.factor(redata2016$row)
> redata2016$position<- as.factor(redata2016$position)
> 
> #load aster package
> library(aster)
Loading required package: trust
> 
> #set graphical mode and dist. for fitness nodes (preds)
> pred<- c(0,1,2,3,4)
> fam<- c(1,1,2,2,2)
> 
> #describe dist. of preds.
> sapply(fam.default(), as.character)[fam]
[1] "bernoulli" "bernoulli" "poisson"   "poisson"   "poisson"  
> 
> #fixed effect model for 2015
> aout2015a<- aster(resp~varb, pred, fam, varb, id, root, data=redata2015)
> 
> aout2015<- aster(resp~varb + fit:(block), pred, fam, varb, id, root, data=redata2015)
> 
> anova(aout2015a, aout2015)
Analysis of Deviance Table

Model 1: resp ~ varb
Model 2: resp ~ varb + fit:(block)
  Model Df Model Dev Df Deviance P(>|Chi|)    
1        5    519.96                          
2        8    570.05  3   50.093 7.631e-11 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> summary(aout2015, show.graph = T)

Call:
aster.formula(formula = resp ~ varb + fit:(block), pred = pred, 
    fam = fam, varvar = varb, idvar = id, root = root, data = redata2015)


Graphical Model:
 variable             predecessor          family   
 Germ                 root                 bernoulli
 flw                  Germ                 bernoulli
 total.pods           flw                  poisson  
 total.pods.collected total.pods           poisson  
 totalseeds           total.pods.collected poisson  

                         Estimate Std. Error z value Pr(>|z|)    
(Intercept)              -3.79677    0.20900 -18.166  < 2e-16 ***
varbGerm                  2.26546    0.25004   9.060  < 2e-16 ***
varbtotal.pods            5.38112    0.24339  22.109  < 2e-16 ***
varbtotal.pods.collected  0.34753    0.22553   1.541 0.123334    
varbtotalseeds            5.15488    0.21711  23.744  < 2e-16 ***
fit:block1A               0.12968    0.03922   3.306 0.000945 ***
fit:block2A               0.13605    0.03979   3.419 0.000628 ***
fit:block3A               0.14876    0.03937   3.779 0.000158 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Original predictor variables dropped (aliased)
     fit:block4A 
> 
> 
> #Designate fitness variable for 2016 data
> fit <- grepl("totalseeds", as.character(redata2016$varb))
> fit<- as.numeric(fit)
> 
> redata2016$fit<- fit
> 
> #check
> with(redata2016, sort(unique(as.character(varb)[fit == 0])))
[1] "flw"                  "Germ"                 "total.pods"          
[4] "total.pods.collected"
> with(redata2016, sort(unique(as.character(varb)[fit == 1])))
[1] "totalseeds"
> 
> #Fixed-effects aster model for 2016 data
> aout2016a<- aster(resp~varb, pred, fam, varb, id, root, data=redata2016)
> 
> aout2016<- aster(resp~varb + fit:(block), pred, fam, varb, id, root, data=redata2016)
> 
> anova(aout2016a, aout2016)
Analysis of Deviance Table

Model 1: resp ~ varb
Model 2: resp ~ varb + fit:(block)
  Model Df Model Dev Df Deviance P(>|Chi|)    
1        5    163.47                          
2        8    191.38  3   27.915 3.784e-06 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> 
> summary(aout2016, show.graph = T)

Call:
aster.formula(formula = resp ~ varb + fit:(block), pred = pred, 
    fam = fam, varvar = varb, idvar = id, root = root, data = redata2016)


Graphical Model:
 variable             predecessor          family   
 Germ                 root                 bernoulli
 flw                  Germ                 bernoulli
 total.pods           flw                  poisson  
 total.pods.collected total.pods           poisson  
 totalseeds           total.pods.collected poisson  

                         Estimate Std. Error z value Pr(>|z|)    
(Intercept)              -5.01908    0.16256 -30.875  < 2e-16 ***
varbGerm                  3.86557    0.20769  18.613  < 2e-16 ***
varbtotal.pods            7.73220    0.18006  42.942  < 2e-16 ***
varbtotal.pods.collected  0.59744    0.19169   3.117  0.00183 ** 
varbtotalseeds            6.34263    0.16478  38.491  < 2e-16 ***
fit:block1B              -0.11000    0.03962  -2.777  0.00549 ** 
fit:block2B              -0.03790    0.02345  -1.616  0.10614    
fit:block3B               0.03946    0.01841   2.143  0.03209 *  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Original predictor variables dropped (aliased)
     fit:block4B 
> 
> 
> #Designation of fitness variable for 2017 data
> fit <- grepl("totalseeds", as.character(redata2017$varb))
> fit<- as.numeric(fit)
> 
> redata2017$fit <- fit
> 
> #check
> with(redata2017, sort(unique(as.character(varb)[fit == 0])))
[1] "flw"                  "Germ"                 "total.pods"          
[4] "total.pods.collected"
> with(redata2017, sort(unique(as.character(varb)[fit == 1])))
[1] "totalseeds"
> 
> 
> #add a variable "root" to redata files, where value is 1
> redata2017<- data.frame(redata2017, root=1)
> 
> 
> #make sure block, row, and position are factors
> redata2017$block<- as.factor(redata2017$block)
> redata2017$row<- as.factor(redata2017$row)
> redata2017$position<- as.factor(redata2017$position)
> 
> #check
> with(redata2017, sort(unique(as.character(varb)[fit == 0])))
[1] "flw"                  "Germ"                 "total.pods"          
[4] "total.pods.collected"
> with(redata2017, sort(unique(as.character(varb)[fit == 1])))
[1] "totalseeds"
> 
> #Fixed-effects aster model for 2016 data
> aout2017a<- aster(resp~varb, pred, fam, varb, id, root, data=redata2017)
> 
> aout2017<- aster(resp~varb + fit:(block), pred, fam, varb, id, root, data=redata2017)
> 
> anova(aout2017a, aout2017)
Analysis of Deviance Table

Model 1: resp ~ varb
Model 2: resp ~ varb + fit:(block)
  Model Df Model Dev Df Deviance P(>|Chi|)    
1        5   -297.78                          
2        8   -251.63  3   46.158  5.25e-10 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> 
> summary(aout2017, show.graph = T)

Call:
aster.formula(formula = resp ~ varb + fit:(block), pred = pred, 
    fam = fam, varvar = varb, idvar = id, root = root, data = redata2017)


Graphical Model:
 variable             predecessor          family   
 Germ                 root                 bernoulli
 flw                  Germ                 bernoulli
 total.pods           flw                  poisson  
 total.pods.collected total.pods           poisson  
 totalseeds           total.pods.collected poisson  

                         Estimate Std. Error z value Pr(>|z|)    
(Intercept)              -1.62418    0.21726  -7.476 7.68e-14 ***
varbGerm                 -0.91328    0.31150  -2.932 0.003369 ** 
varbtotal.pods            3.40933    0.25228  13.514  < 2e-16 ***
varbtotal.pods.collected -3.32410    0.26599 -12.497  < 2e-16 ***
varbtotalseeds            3.11873    0.22752  13.708  < 2e-16 ***
fit:block1C               0.20190    0.05055   3.994 6.50e-05 ***
fit:block2C               0.13723    0.05079   2.702 0.006898 ** 
fit:block3C               0.18325    0.05053   3.627 0.000287 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Original predictor variables dropped (aliased)
     fit:block4C 
> 
> 
> ##############################################################
> #Estimate mean fitness for 2015, 2016 (greenhouse cohort), and 2017 (greenhouse cohort) data
> 
> #generate MLE of saturated model mean value parameter vector: mu
> pout2015<- predict.aster(aout2015, se.fit=TRUE)
> pout2016<- predict.aster(aout2016, se.fit=TRUE)
> pout2017<- predict.aster(aout2017, se.fit=TRUE)
> 
> 
> #make up covariate data for hypothetical
> #indivs that meet "typical" criteria:
> #Therefore, "make up" covariate data for hypothetical individuals
> #that re comparable and obtain mean values for them
> ##############
> 
> #make data.frame of indivudals for each block (1-8)
> fred2015 <- data.frame(block=levels(redata2015$block),
+                    Germ=1, flw=1, total.pods=1, total.pods.collected=1, totalseeds=1,root = 1)
> 
> fred2016 <- data.frame(block=levels(redata2016$block),
+                        Germ=1, flw=1, total.pods=1, total.pods.collected=1, totalseeds=1,root = 1)
> 
> 
> fred2017 <- data.frame(block=levels(redata2017$block),
+                        Germ=1, flw=1, total.pods=1, total.pods.collected=1, totalseeds=1,root = 1)
> 
> 
> #reshape the "made up data" just as the actual data
> renewdata2015 <- reshape(fred2015, varying = list(vars),
+                      direction = "long", timevar = "varb",
+                      times = as.factor(vars), v.names = "resp")
> 
> renewdata2016 <- reshape(fred2016, varying = list(vars),
+                          direction = "long", timevar = "varb",
+                          times = as.factor(vars), v.names = "resp")
> 
> renewdata2017 <- reshape(fred2017, varying = list(vars),
+                          direction = "long", timevar = "varb",
+                          times = as.factor(vars), v.names = "resp")
> 
> #make character string from "varb" of renewdata,
> #without actual values (e.g., the layers of varb in renewdata)
> layer<- gsub("[0-9]", "", as.character(renewdata2015$varb))
> layer<- gsub("[0-9]", "", as.character(renewdata2016$varb))
> layer<- gsub("[0-9]", "", as.character(renewdata2017$varb))
> 
> #add layer to renewdata
> renewdata2015<- data.frame(renewdata2015, layer= layer)
> renewdata2016<- data.frame(renewdata2016, layer= layer)
> renewdata2017<- data.frame(renewdata2017, layer= layer)
> 
> # add totalseeds in new layer col of renewdata as numeric, called fit
> fit<- as.numeric(layer=="totalseeds")
> 
> #add fit to renewdata
> renewdata2015<- data.frame(renewdata2015, fit = fit)
> renewdata2016<- data.frame(renewdata2016, fit = fit)
> renewdata2017<- data.frame(renewdata2017, fit = fit)
> 
> 
> #Generate fintess estimates and standard errors for each block
> nblock<- nrow(fred2015)#all years have same number of blocks so 2015 file will do for both
> nnode<- length(vars)
> amat<- array(0, c(nblock, nnode, nblock))
> dim(amat)# makes an 4 x 5 x 4 matrix
[1] 4 5 4
> 
> #only want means for k'th individual that contributes to expected
> #fitness, and want to add only totalseeds entries
> 
> #makes 8 , 4x8 matrices that 
> 
> foo<- grepl("totalseeds", vars)
> for(k in 1:nblock)
+   amat[k, foo, k]<- 1
> 
> #generate predicted valuses using aout object, with renewdata, and amat format
> pout.amat2015<- predict(aout2015, newdata= renewdata2015, varvar= varb,
+                     idvar= id, root = root, se.fit=TRUE, amat = amat)
> 
> pout.amat2016<- predict(aout2016, newdata= renewdata2016, varvar= varb,
+                         idvar= id, root = root, se.fit=TRUE, amat = amat)
> 
> pout.amat2017<- predict(aout2017, newdata= renewdata2017, varvar= varb,
+                         idvar= id, root = root, se.fit=TRUE, amat = amat)
> 
> #combine std.err with estimates, and then round
> #to three decimal places
> cs2015<- cbind(pout.amat2015$fit, pout.amat2015$se.fit)
> cs2016<- cbind(pout.amat2016$fit, pout.amat2016$se.fit)
> cs2017<- cbind(pout.amat2017$fit, pout.amat2017$se.fit)
> 
> rownames(cs2015)<- as.character(fred2015$block)
> rownames(cs2016)<- as.character(fred2016$block)
> rownames(cs2017)<- as.character(fred2017$block)
> 
> colnames(cs2015)<- c("Expected Fitness", "SE")
> colnames(cs2016)<- c("Expected Fitness", "SE")
> colnames(cs2017)<- c("Expected Fitness", "SE")
> 
> 
> #####################################################################
> #The median expected fitness for each year is used to represent     #
> #the site-specific fitness. The block effects representing these    #
> # fitness values will be used to calcualte and convert  Va(W)       #
> #estimates from the canonical to man-value parameter scale          #
> #####################################################################
> 
> round(cs2015, 3) # median: block 1 - 1.795 (0.243)
   Expected Fitness    SE
1A            1.795 0.243
2A            2.163 0.518
3A            3.205 0.524
4A            0.133 0.072
> round(cs2016, 3) # median: block 2 - 0.725 (0.112)
   Expected Fitness    SE
1B            0.416 0.109
2B            0.725 0.112
3B            1.484 0.174
4B            1.012 0.134
> round(cs2017, 3) # median: block 3 - 1.243 (0.253)
   Expected Fitness    SE
1C            1.816 0.394
2C            0.564 0.109
3C            1.243 0.253
4C            0.114 0.051
> 
> 
> #############################################################################
> 
> # 2. Reaster analyses for 2015, 2016, and 2017 greenhouse cohort. For clarity, the 
> #    actual calculation of Va(W) will be performed in a different script (Vaw_Calculation.R).
> 
> 
> ####combine maternal and paternal into a single parental effect to be estimated
> modmat.sire2015 <- model.matrix(~ 0 + fit:paternalID, redata2015)
> modmat.dam2015 <- model.matrix(~ 0 + fit:maternalID, redata2015)
> modmat.siredam2015 <- cbind(modmat.sire2015,modmat.dam2015)
> 
> modmat.sire2016 <- model.matrix(~ 0 + fit:paternalID, redata2016)
> modmat.dam2016 <- model.matrix(~ 0 + fit:maternalID, redata2016)
> modmat.siredam2016 <- cbind(modmat.sire2016,modmat.dam2016)
> 
> modmat.sire2017 <- model.matrix(~ 0 + fit:paternalID, redata2017)
> modmat.dam2017 <- model.matrix(~ 0 + fit:maternalID, redata2017)
> modmat.siredam2017 <- cbind(modmat.sire2017,modmat.dam2017)
> 
> #save(redata2015, file="redata2015.RData")
> #save(redata2016, file="redata2016.RData")
> #save(redata2017, file="redata2017.RData")
> 
> 
> #save(modmat.siredam2015, file="modmat.siredam2015.RData")
> #save(modmat.siredam2016, file="modmat.siredam2016.RData")
> #save(modmat.siredam2017, file="modmat.siredam2017.RData")
> 
> 
> #Reaster analyses
> 
> #NOTE: we will use the same graphical model and statistical distributions that we used
> #      in the fixed-effects aster models to estiamte mean expected fitness
> 
> 
> 
> #2015 analysis
> rout2015a<- reaster(resp~varb,list(parental=~0 + fit:modmat.siredam2015),
+                    +pred, fam, varb, id, root, data=redata2015) 
> 
> rout2015<- reaster(resp~varb +fit:(block),list(parental=~0 + fit:modmat.siredam2015),
+                 +pred, fam, varb, id, root, data=redata2015) 
> 
> anova(rout2015a, rout2015)
Analysis of Deviance Table

Model 1: resp ~ varb, ~0 + fit:modmat.siredam2015
Model 2: resp ~ varb + fit:(block), ~0 + fit:modmat.siredam2015
  Mod Df Fix Mod Df Rand Mod Dev Df Fix Df Rand Deviance    P-value
1          5           1  612.80                                   
2          8           1  655.57      3       0   42.774 2.7485e-09
> 
> summary(rout2015)

Call:
reaster.formula(fixed = resp ~ varb + fit:(block), random = list(parental = ~0 + 
    fit:modmat.siredam2015), pred = +pred, fam = fam, varvar = varb, 
    idvar = id, root = root, data = redata2015)


Fixed Effects:
                         Estimate Std. Error z value Pr(>|z|)    
(Intercept)              -3.52313    0.20770 -16.962  < 2e-16 ***
varbGerm                  1.99182    0.24895   8.001 1.24e-15 ***
varbtotal.pods            5.12188    0.24153  21.206  < 2e-16 ***
varbtotal.pods.collected  0.08862    0.22349   0.397 0.691716    
varbtotalseeds            4.84127    0.21769  22.240  < 2e-16 ***
fit:block1A               0.13498    0.04049   3.334 0.000857 ***
fit:block2A               0.13542    0.04111   3.294 0.000988 ***
fit:block3A               0.14781    0.04072   3.630 0.000283 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Square Roots of Variance Components (P-values are one-tailed):
         Estimate Std. Error z value Pr(>|z|)/2    
parental 0.036371   0.006062       6   9.85e-10 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> #save(rout2015, file="rout2015.RData")
> 
> 
> #2016 analysis
> rout2016a<- reaster(resp~varb,list(parental=~0 + fit:modmat.siredam2016),
+                    +pred, fam, varb, id, root, data=redata2016)
> 
> 
> rout2016<- reaster(resp~varb +fit:(block),list(parental=~0 + fit:modmat.siredam2016),
+                     +pred, fam, varb, id, root, data=redata2016)
> 
> anova(rout2016a, rout2016)
Analysis of Deviance Table

Model 1: resp ~ varb, ~0 + fit:modmat.siredam2016
Model 2: resp ~ varb + fit:(block), ~0 + fit:modmat.siredam2016
  Mod Df Fix Mod Df Rand Mod Dev Df Fix Df Rand Deviance   P-value
1          5           1  334.31                                  
2          8           1  354.83      3       0   20.514 0.0001328
> 
> summary(rout2016) 

Call:
reaster.formula(fixed = resp ~ varb + fit:(block), random = list(parental = ~0 + 
    fit:modmat.siredam2016), pred = +pred, fam = fam, varvar = varb, 
    idvar = id, root = root, data = redata2016)


Fixed Effects:
                          Estimate Std. Error z value Pr(>|z|)    
(Intercept)              -4.879993   0.161476 -30.221  < 2e-16 ***
varbGerm                  3.726479   0.206839  18.016  < 2e-16 ***
varbtotal.pods            7.596736   0.179014  42.437  < 2e-16 ***
varbtotal.pods.collected  0.562493   0.188584   2.983  0.00286 ** 
varbtotalseeds            6.083588   0.168927  36.013  < 2e-16 ***
fit:block1B              -0.119371   0.039586  -3.015  0.00257 ** 
fit:block2B              -0.051294   0.023433  -2.189  0.02860 *  
fit:block3B               0.008209   0.018787   0.437  0.66216    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Square Roots of Variance Components (P-values are one-tailed):
         Estimate Std. Error z value Pr(>|z|)/2    
parental  0.11630    0.01724   6.746    7.6e-12 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> #save(rout2016, file="rout2016.RData")
> 
> 
> #2017 analysis
> rout2017a<- reaster(resp~varb,list(parental=~0 + fit:modmat.siredam2017),
+                    +pred, fam, varb, id, root, data=redata2017) 
> 
> rout2017<- reaster(resp~varb +fit:(block),list(parental=~0 + fit:modmat.siredam2017),
+                    +pred, fam, varb, id, root, data=redata2017) 
> 
> anova(rout2017a, rout2017)
Analysis of Deviance Table

Model 1: resp ~ varb, ~0 + fit:modmat.siredam2017
Model 2: resp ~ varb + fit:(block), ~0 + fit:modmat.siredam2017
  Mod Df Fix Mod Df Rand Mod Dev Df Fix Df Rand Deviance    P-value
1          5           1 -261.39                                   
2          8           1 -225.29      3       0   36.098 7.1387e-08
> 
> summary(rout2017)

Call:
reaster.formula(fixed = resp ~ varb + fit:(block), random = list(parental = ~0 + 
    fit:modmat.siredam2017), pred = +pred, fam = fam, varvar = varb, 
    idvar = id, root = root, data = redata2017)


Fixed Effects:
                         Estimate Std. Error z value Pr(>|z|)    
(Intercept)              -1.56033    0.21655  -7.205 5.79e-13 ***
varbGerm                 -0.97713    0.31100  -3.142 0.001679 ** 
varbtotal.pods            3.35226    0.25141  13.334  < 2e-16 ***
varbtotal.pods.collected -3.36064    0.26437 -12.712  < 2e-16 ***
varbtotalseeds            3.03226    0.22759  13.323  < 2e-16 ***
fit:block1C               0.18577    0.05087   3.652 0.000260 ***
fit:block2C               0.13727    0.05099   2.692 0.007106 ** 
fit:block3C               0.17955    0.05075   3.538 0.000403 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Square Roots of Variance Components (P-values are one-tailed):
         Estimate Std. Error z value Pr(>|z|)/2    
parental 0.038129   0.007987   4.774   9.04e-07 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> #save(rout2017, file="rout2017.RData")
> 
> 
> #####################################
> # 3. G x Time (environment) analysis#
> #####################################
> 
> csdat<- read.csv("csdat.csv")
> 
> library(aster)
> 
> #subset only greenhouse cohort form all three years of data
> 
> 
> 
> gh<- subset(csdat, cohort=="greenhouse")
> 
> gh<- droplevels(gh)
> 
> #make sure block, row, and position are factors
> gh$block<- as.factor(gh$block)
> gh$row<- as.factor(gh$row)
> gh$position<- as.factor(gh$position)
> gh$year<- as.factor(gh$year)
> gh$maternalID<- as.factor(gh$maternalID)
> gh$paternalID<- as.factor(gh$paternalID)
> 
> #set response variables -> these represent variables in graphical model
> vars<- c("Germ","flw","total.pods", "total.pods.collected", "totalseeds")
> 
> 
> #reshape data so that all response variables are located in a single vector in a new data
> #set called "redata"
> redata <- reshape(gh, varying = list(vars), direction = "long",timevar = "varb", times = as.factor(vars), v.names = "resp")
> 
> 
> #Designation of fitness variable: totalseeds
> fit <- grepl("totalseeds", as.character(redata$varb))
> fit<- as.numeric(fit)
> redata$fit <- fit
> 
> #check
> with(redata, sort(unique(as.character(varb)[fit == 0])))
[1] "flw"                  "Germ"                 "total.pods"          
[4] "total.pods.collected"
> with(redata, sort(unique(as.character(varb)[fit == 1])))
[1] "totalseeds"
> 
> 
> #add a variable "root" to redata files, where value is 1
> redata<- data.frame(redata, root=1)
> 
> 
> ####combine maternal and paternal into a single parental effect to be estimated
> modmat.sire <- model.matrix(~ 0 + fit:paternalID, redata)
> modmat.dam <- model.matrix(~ 0 + fit:maternalID, redata)
> modmat.siredam <- cbind(modmat.sire,modmat.dam)
> 
> 
> #G x Time reaster analysis
> routGxTime.a<- reaster(resp~varb,list(parental=~0 + fit:modmat.siredam), +pred, fam, varb, id, root, data=redata) #without block
> 
> summary(routGxTime.a)

Call:
reaster.formula(fixed = resp ~ varb, random = list(parental = ~0 + 
    fit:modmat.siredam), pred = +pred, fam = fam, varvar = varb, 
    idvar = id, root = root, data = redata)


Fixed Effects:
                         Estimate Std. Error z value Pr(>|z|)    
(Intercept)               -3.9275     0.1103 -35.621  < 2e-16 ***
varbGerm                   2.2902     0.1401  16.351  < 2e-16 ***
varbtotal.pods             6.2567     0.1246  50.218  < 2e-16 ***
varbtotal.pods.collected  -0.3434     0.1249  -2.749  0.00599 ** 
varbtotalseeds             5.3240     0.1145  46.513  < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Square Roots of Variance Components (P-values are one-tailed):
         Estimate Std. Error z value Pr(>|z|)/2    
parental  0.08412    0.01197   7.027   1.06e-12 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> routGxTime.b<- reaster(resp~varb + fit:(block),list(parental=~0 + fit:modmat.siredam), +pred, fam, varb, id, root, data=redata) #with block
> 
> summary(routGxTime.b)

Call:
reaster.formula(fixed = resp ~ varb + fit:(block), random = list(parental = ~0 + 
    fit:modmat.siredam), pred = +pred, fam = fam, varvar = varb, 
    idvar = id, root = root, data = redata)


Fixed Effects:
                         Estimate Std. Error z value Pr(>|z|)    
(Intercept)              -3.84788    0.10972 -35.071  < 2e-16 ***
varbGerm                  2.21064    0.13965  15.830  < 2e-16 ***
varbtotal.pods            6.18031    0.12406  49.818  < 2e-16 ***
varbtotal.pods.collected -0.40086    0.12407  -3.231 0.001234 ** 
varbtotalseeds            5.01481    0.12812  39.142  < 2e-16 ***
fit:block1A               0.25486    0.05548   4.594 4.35e-06 ***
fit:block1B               0.14167    0.06226   2.276 0.022871 *  
fit:block1C               0.24238    0.05636   4.301 1.70e-05 ***
fit:block2A               0.25241    0.05618   4.493 7.03e-06 ***
fit:block2B               0.19055    0.05696   3.345 0.000821 ***
fit:block2C               0.17286    0.05680   3.043 0.002341 ** 
fit:block3A               0.27544    0.05563   4.951 7.37e-07 ***
fit:block3B               0.23275    0.05586   4.166 3.09e-05 ***
fit:block3C               0.22194    0.05639   3.936 8.29e-05 ***
fit:block4A               0.03347    0.07558   0.443 0.657910    
fit:block4B               0.21475    0.05624   3.819 0.000134 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Square Roots of Variance Components (P-values are one-tailed):
         Estimate Std. Error z value Pr(>|z|)/2    
parental  0.07924    0.01144   6.924   2.19e-12 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> anova(routGxTime.a, routGxTime.b, tolerance = .Machine$double.eps ^ 0.7) #liklihood ratio test for effect of "block"
Analysis of Deviance Table

Model 1: resp ~ varb, ~0 + fit:modmat.siredam
Model 2: resp ~ varb + fit:(block), ~0 + fit:modmat.siredam
  Mod Df Fix Mod Df Rand Mod Dev Df Fix Df Rand Deviance    P-value
1          5           1 -690.33                                   
2         16           1 -500.53     11       0    189.8 9.6807e-35
> 
> routGxTime.c<- reaster(resp~varb +fit:(year),list(parental=~0 + fit:modmat.siredam),
+                      +pred, fam, varb, id, root, data=redata) 
> 
> summary(routGxTime.c)

Call:
reaster.formula(fixed = resp ~ varb + fit:(year), random = list(parental = ~0 + 
    fit:modmat.siredam), pred = +pred, fam = fam, varvar = varb, 
    idvar = id, root = root, data = redata)


Fixed Effects:
                          Estimate Std. Error z value Pr(>|z|)    
(Intercept)              -3.903080   0.110095 -35.452  < 2e-16 ***
varbGerm                  2.265840   0.139943  16.191  < 2e-16 ***
varbtotal.pods            6.233419   0.124428  50.097  < 2e-16 ***
varbtotal.pods.collected -0.360503   0.124684  -2.891  0.00384 ** 
varbtotalseeds            5.266609   0.114768  45.889  < 2e-16 ***
fit:year2015              0.055237   0.008316   6.643 3.08e-11 ***
fit:year2016              0.015383   0.009448   1.628  0.10351    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Square Roots of Variance Components (P-values are one-tailed):
         Estimate Std. Error z value Pr(>|z|)/2    
parental  0.08460    0.01204   7.026   1.06e-12 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> anova(routGxTime.a, routGxTime.c, tolerance = .Machine$double.eps ^ 0.7) #liklihood ratio test for effect of "year"
Analysis of Deviance Table

Model 1: resp ~ varb, ~0 + fit:modmat.siredam
Model 2: resp ~ varb + fit:(year), ~0 + fit:modmat.siredam
  Mod Df Fix Mod Df Rand Mod Dev Df Fix Df Rand Deviance    P-value
1          5           1 -690.33                                   
2          7           1 -631.38      2       0   58.945 1.5862e-13
> 
> 
> routGxTime<- reaster(resp~varb +fit:(block + year),list(parental=~0 + fit:modmat.siredam, parental.time=~0 + fit:modmat.siredam:year),+pred, fam, varb, id, root, data=redata)#full model 
> 
> summary(routGxTime)

Call:
reaster.formula(fixed = resp ~ varb + fit:(block + year), random = list(parental = ~0 + 
    fit:modmat.siredam, parental.time = ~0 + fit:modmat.siredam:year), 
    pred = +pred, fam = fam, varvar = varb, idvar = id, root = root, 
    data = redata)


Fixed Effects:
                         Estimate Std. Error z value Pr(>|z|)    
(Intercept)              -3.79618    0.10945 -34.684  < 2e-16 ***
varbGerm                  2.15894    0.13944  15.483  < 2e-16 ***
varbtotal.pods            6.13138    0.12377  49.537  < 2e-16 ***
varbtotal.pods.collected -0.43475    0.12352  -3.520 0.000432 ***
varbtotalseeds            4.95008    0.12838  38.558  < 2e-16 ***
fit:block1A               0.24661    0.05937   4.154 3.27e-05 ***
fit:block1B               0.13717    0.06595   2.080 0.037533 *  
fit:block1C               0.23272    0.05682   4.096 4.21e-05 ***
fit:block2A               0.24487    0.06011   4.074 4.63e-05 ***
fit:block2B               0.18107    0.06089   2.974 0.002944 ** 
fit:block2C               0.17570    0.05729   3.067 0.002165 ** 
fit:block3A               0.26669    0.05957   4.477 7.57e-06 ***
fit:block3B               0.22076    0.06001   3.678 0.000235 ***
fit:block3C               0.22427    0.05679   3.949 7.84e-05 ***
fit:block4A               0.02094    0.07840   0.267 0.789418    
fit:block4B               0.21423    0.06021   3.558 0.000374 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Square Roots of Variance Components (P-values are one-tailed):
              Estimate Std. Error z value Pr(>|z|)/2    
parental      0.066910   0.012425   5.385   3.62e-08 ***
parental.time 0.051693   0.007038   7.345   1.03e-13 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> 
> anova(routGxTime.c, routGxTime, tolerance = .Machine$double.eps ^ 0.7)
Analysis of Deviance Table

Model 1: resp ~ varb + fit:(year), ~0 + fit:modmat.siredam
Model 2: resp ~ varb + fit:(block + year), ~0 + fit:modmat.siredam, ~0 + fit:modmat.siredam:year
  Mod Df Fix Mod Df Rand Mod Dev Df Fix Df Rand Deviance    P-value
1          7           1 -631.38                                   
2         16           2 -405.74      9       1   225.64 4.1968e-43
> 
> 
> 
> #save(routGxTime, file="routGxTime.RData")
> 
> 
> proc.time()
    user   system  elapsed 
40513.82   114.57 40671.95 
